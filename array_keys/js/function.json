{
    "prototype": "my_array_keys($array = array(), $searchValue = null, $strict = false, $expandArray = false, $depth = 0, $MAX_DEPTH = INF, $keys = array()) {" ,
    "body": "//Stop condition            if ($depth == $MAX_DEPTH) {            return $keys;        }        // Parameter checks to avoid possible misuses of the function.        //'Yoda conditions' read as 'If it is false that $array is_array( )'        if (false === is_array($array)) {            throw new Exception('Variable $array must be of Array type.');        }        if (false === is_bool($strict)) {            throw new Exception('Variable $strict must be boolean (true or false).');        }        if (false === is_bool($expandArray)) {            throw new Exception('Variable $expandArray must be boolean (true or false).');        }        if (is_nan($MAX_DEPTH)) {            throw new Exception('Variable $MAX_DEPTH must be 0 or greater.');        }        if ($depth < 0) {            throw new Exception('Variable $depth must be 0 or greater.');        }        if ($depth > $MAX_DEPTH) {            throw new Exception('Variable $depth must be greater than $MAX_DEPTH.');        }        //Condition to iterate recursively over and over until it evaluates as false.        if ($depth < $MAX_DEPTH) {            $depth += 1;            //For each key in input array ge catch both $key and $value...            foreach ($array as $key => $value) {                // ... If there's a $searchValue, look for it.                if (false === is_null($searchValue)) {                    // ... And if strict mode is set to true, use triple equal comparisson.                    if (true === $strict) {                        if ($value === $searchValue) {                            $keys[] = $key;                        }                    } else {                        // otherwise, use normal comparisson.                        if ($value == $searchValue) {                            $keys[] = $key;                        }                    }                } else {                    // If there is not search value, just push the $key.                    $keys[] = $key;                }                // If expand is true and $value is an array, we iterate recursively until reach desired depth                if (true == $expandArray && is_array($array[$key])) {                    $keys[$key] = my_array_keys($array[$key], $searchValue, $strict, $expandArray, $depth, $MAX_DEPTH, $keys);                }            }        }        return $keys;    }"
}  
